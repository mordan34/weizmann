---
- name: Configure system and connect to AD
  hosts: all
  become: true
  vars: 
    env: "{{ lookup('vars', domain) }}"
  vars_files:
    - ../vault/vault-pass.yml
  roles:
    - { role: linux-system-roles.crypto_policies,
        when:  'ansible_facts["os_family"] == "RedHat"' , 
               'ansible_facts["distribution_major_version"] == "8"' }
    
  tasks:

    # Keeping current crypto Policy for RHEL8
    - name: Save current Policy
      set_fact: 
        policy: "{{ crypto_policies_active }}"
      when:  
         - 'ansible_facts["os_family"] == "RedHat"'
         - 'ansible_facts["distribution_major_version"] == "8"' 

    # Change crypto policy to a weaker one so that Symantec AV could be installed from repo
    - name: Configure crypto policy to DEFAULT
      include_role:
        name: linux-system-roles.crypto_policies
      vars:
        - crypto_policies_policy: DEFAULT
        - crypto_policies_reboot_ok: false
      when: policy == "FUTURE" 

    # Modify hostname to include domain fqdn
    - name: configure domain name and domain search
      command: hostnamectl set-hostname "{{ inventory_hostname }}.{{ env.domain }}"
      when: not ansible_hostname is search("env.domain")

    # Install Symantec AV and dependencies
    - include_tasks: ../tasks/installsep.yml
   
    # Revert to the original crypto policy
    - name: Configure crypto policy back to before
      include_role:
        name: linux-system-roles.crypto_policies
      vars:
        - crypto_policies_policy: "{{ policy }}"
        - crypto_policies_reboot_ok: False
      when: policy == "FUTURE"

    # Configuring Chrony time service for DC Servers
    - include_tasks: ../tasks/configuretime.yml

    - name: Copy krb5.conf to the client
      template: src=../templates/krb5_{{ domain }}.conf dest=/etc/krb5.conf

    # Install realmd and it's dependecies
    - name: Install the required packages
      yum:
        name: realmd,sssd,oddjob,oddjob-mkhomedir,adcli,samba-common,samba-common-tools,chrony,python3-pip,krb5-workstation
        state: present
      notify:
        - restart realmd

    - name: Install pexpect using pip
      pip:
        name: pexpect

    # Joining the system to AD under the correct OU
    - name: Join system to {{ env.domain }}  and add the computer object in the Linux OU
      expect:
        command: /bin/bash -c "/usr/sbin/realm join -U {{ env.username }} {{ env.domain }} --computer-ou='{{ env.ou }}'"
        responses:
          Password for *: "{{ lookup('vars', domain + '_password') }}"
      register: realm_result
      failed_when: "not realm_result.stdout is search('Already joined to this domain') and realm_result.rc != 0"

    # Configure Authentication for users
    - name: Allow the LinuxAdmins AD group to logon to the system
      command: /bin/bash -c "/usr/sbin/realm permit -g LinuxAdmGrp@{{ env.domain }}"

    # Configure sudo access for Linux team
    - name: Add the LinuxAdmins AD Group to sudoers
      lineinfile:
        dest: /etc/sudoers
        line: "%LinuxAdmGrp@{{ env.domain }}        ALL=(ALL)       ALL"
        insertafter: '^%wheel'
      notify:
        - restart sssd

  handlers:

      - name: restart sssd
        service: name=sssd state=restarted

      - name: restart realmd
        service: name=realmd state=restarted
